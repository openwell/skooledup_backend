{"version":3,"sources":["../../src/middleware/validateInput.js"],"names":["validatorFunction","req","res","next","errors","isEmpty","status","json","array","paramsValidation","id","params","test","validationHandlerForPassword","arg","matches","withMessage","middleware","login","trim","escape","isEmail","user","isString","school","isLength","min","degree","faculty","isInt","department","course"],"mappings":"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","sourcesContent":["import { check, validationResult } from 'express-validator';\nimport errorHandler from './errorHandler';\n\nfunction validatorFunction(req, res, next) {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      status: 400,\n      errors: errors.array(),\n    });\n  }\n  return next();\n}\n\nfunction paramsValidation(req, res, next) {\n  let { id } = req.params;\n  if (/^\\d*$/.test(id)) {\n    return next();\n  }\n  return errorHandler(400, res, 'params must be an integer');\n}\n\n// function validationHandlerForIntegerInput(arg, min, max) {\n//   return check(arg)\n//     .trim()\n//     .escape()\n//     .matches(/^\\d*$/)\n//     .withMessage('regex')\n//     .isLength({ min, max })\n//     .withMessage(`must be minimum of ${min} -${max} letters`)\n//     .isInt()\n//     .withMessage('must be an integer');\n// }\n\n// function validationHandlerForStringInput(arg, min, max) {\n//   return check(arg)\n//     .trim()\n//     .escape()\n//     .customSanitizer((value) => value.replace(/\\s+/g, ' '))\n//     .matches(/^[a-zA-Z0-9 ,._'-]+$/i)\n//     .withMessage(\"Special Characters not Allowed expect (.,_'-)\")\n//     .isLength({ min, max })\n//     .withMessage(`must be minimum of ${min} -${max} letters`)\n//     .isString()\n//     .withMessage('must be a string');\n// }\n\n// names\n// function validationHandlerForStringInput1(arg, min, max) {\n//   return check(arg)\n//     .trim()\n//     .matches(/^[a-zA-Z,._'-]+$/i)\n//     .withMessage(\n//       \"WhiteSpace, Integer and Special Characters not Allowed expect (.,_'-)\"\n//     )\n//     .isLength({ min, max })\n//     .withMessage(`must be minimum of ${min} -${max} letters`)\n//     .isString()\n//     .escape()\n//     .withMessage('must be a string');\n// }\n\nfunction validationHandlerForPassword(arg) {\n  return check(arg)\n    .matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, 'i')\n    .withMessage(\n      'Password must contain at least 8 characters, including 1 Upper / 1 Lowercase a Number'\n    );\n  // .custom((value, { req }) => {\n  //   if (req.body.confirmPassword === undefined) {\n  //     return false;\n  //   } return true;\n  // })\n  // .withMessage('Confirm password is required')\n  // .custom((value, { req }) => {\n  //   if (value !== req.body.confirmPassword) {\n  //     return false;\n  //   }\n  //   return value;\n  // })\n  // .withMessage(\"Passwords don't match.\");\n}\n\n// function validateHappeningOn(arg) {\n//   return check(arg)\n//     .custom((value, { req }) => {\n//       const inputDate = Date.parse(value);\n//       if (!Number(inputDate)) {\n//         return false;\n//       }\n//       return value;\n//     })\n//     .withMessage(\n//       'happeningOn requires Date/time in this format (yyyy:mm:dd hh:mm:ss)'\n//     )\n//     .custom((value, { req }) => {\n//       const inputDate = Date.parse(value);\n//       const currentDate = Date.now();\n//       if (currentDate > inputDate) {\n//         return false;\n//       }\n//       return value;\n//     })\n//     .withMessage(\n//       'happeningOn requires future Date/time in this format (yyyy:mm:dd hh:mm:ss)'\n//     );\n// }\n\nconst middleware = {\n  login: [\n    check('email')\n      .trim()\n      .escape()\n      .isEmail()\n      .withMessage('Please provide a valid email'),\n    check('password')\n      .trim()\n      .matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/, 'i')\n      .withMessage(\n        'Password must contain at least 8 characters, including 1 Upper / 1 Lowercase a Number'\n      ),\n    validatorFunction,\n  ],\n  user: [\n    check('name')\n      .trim()\n      .escape()\n      .isString()\n      .withMessage('Please provide a valid name'),\n    check('email')\n      .trim()\n      .escape()\n      .isEmail()\n      .withMessage('Please provide a valid email'),\n    validationHandlerForPassword('password'),\n    validatorFunction,\n  ],\n  school: [\n    check('school_name')\n      .trim()\n      .escape()\n      .isString()\n      .isLength({ min: 5 })\n      .withMessage('must be at least 5 chars long'),\n    validatorFunction,\n  ],\n  degree: [\n    check('degree_name')\n      .trim()\n      .escape()\n      .isString()\n      .isLength({ min: 5 })\n      .withMessage('must be at least 5 chars long'),\n    validatorFunction,\n  ],\n  faculty: [\n    check('faculty_name')\n      .trim()\n      .escape()\n      .isString()\n      .isLength({ min: 5 })\n      .withMessage('must be at least 5 chars long'),\n    check('school_id').isInt().withMessage('must be an integer'),\n    validatorFunction,\n  ],\n  department: [\n    check('department_name')\n      .trim()\n      .escape()\n      .isString()\n      .isLength({ min: 5 })\n      .withMessage('must be at least 5 chars long'),\n    check('faculty_id').isInt().withMessage('must be an integer'),\n    validatorFunction,\n  ],\n  course: [\n    check('course_name')\n      .trim()\n      .escape()\n      .isString()\n      .isLength({ min: 5 })\n      .withMessage('must be at least 5 chars long'),\n    //others\n    check('department_id').isInt().withMessage('must be an integer'),\n    check('degree_id').isInt().withMessage('must be an integer'),\n    validatorFunction,\n  ],\n  params: [paramsValidation],\n};\nexport default middleware;\n"],"file":"validateInput.js"}